(()=>{"use strict";var __webpack_require__={n:n=>{var c=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(c,{a:c}),c},d:(n,c)=>{for(var e in c)__webpack_require__.o(c,e)&&!__webpack_require__.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:c[e]})},o:(n,c)=>Object.prototype.hasOwnProperty.call(n,c)};eval("\n;// CONCATENATED MODULE: ./src/Maybe.js\n\nclass Maybe_Maybe {\n  constructor(value) {\n    this.__value = value;\n  }\n\n  isNothing() { \n    return this.__value === undefined || this.__value === null;\n  }\n\n  static of(value) {\n    return new Maybe_Maybe(value);\n  }\n\n  map(fn) {\n    return this.isNothing() ? this : new Maybe_Maybe(fn(this.__value));\n  }\n\n  ap(functor) {\n    return this.isNothing() ? this : functor.map(this.__value);\n  }\n\n  chain(fn) {\n    return this.map(fn).join();\n  }\n\n  join() {\n    return this.__value;\n  }\n}\n;// CONCATENATED MODULE: ./src/utils/object.js\n\n\nconst prop = (name) => object => Maybe_Maybe.of(object[name]);\n;// CONCATENATED MODULE: ./src/utils/array.js\n\n\n\n\n\nconst array_first = prop(0);\n\nconst last = (arr) => Maybe.of(arr[arr.length - 1]);\n\nconst find = (fn) => (arr) => Maybe.of(arr.find(fn));\n\nconst filter = (fn) => (arr) => arr.filter(fn);\n\nconst pick = (fn) => (arr) => arr.filter(flow(fn, not));\n\nconst toArray = (arg) => Array.from(arg);\n;// CONCATENATED MODULE: ./src/utils/boolean.js\n\n\nconst flipBool = (bool) => !flipBool;\n\nconst boolean_not = (fn) => flow(\n  fn,\n  toBool,\n  flipBool\n);\n\nconst toBool = (value) => Boolean(value);\n\n\n;// CONCATENATED MODULE: external \"jsdom\"\nconst external_jsdom_namespaceObject = require(\"jsdom\");;\n;// CONCATENATED MODULE: ./src/utils/dom.js\n\n\n\n\n\n\nconst domFromHTML = (html) => new external_jsdom_namespaceObject.JSDOM(html);\n\nconst querySelectorAll = (selector) => (doc) => doc.querySelectorAll(selector)\n\nconst querySelector = (selector) => flow(querySelectorAll(selector), first);\n\nconst reverse = (arr) => arr.reverse();\n\nconst getAttribute = (atr) => (node) => Maybe_Maybe.of(node.getAttribute(atr))\n;// CONCATENATED MODULE: ./src/utils/fp.js\n\n\nconst fp_flow = (...fns) => (value) => fns.reduce(\n  (previous, fn) => fn(previous), value\n);\n\nconst compose = (...fns) => fp_flow(fns.reverse());\n\nconst left = (value) => new Left(value);\n\nconst map = (fn) => (functor) => functor.map(fn);\n\nconst join = (monad) => monad.join();\n\nconst chain = (fn) => (monad) => monad.chain(fn);\n\nconst either = (left, right) => (either) => either.isLeft() \n  ? left(either.__value) \n  : right(either.__value);\n\nconst id = (value) => value;\n\nconst wrap = (value) => () => value;\n\nconst value = (func) => func.__value;\n\nconst isNothing = (func) => func.isNothing();\n\nconst debug = (fn) => (value) => {\n  console.log(fn(value))\n  return value\n}\n\n\n\n\n;// CONCATENATED MODULE: ./src/Task.js\n\n\n\nclass Task {\n  constructor(fn) {\n    this.task = fn;\n  }\n\n  // static rejected(x) {\n  //   return new Promise((reject, _) => reject(x));\n  // }\n\n  static of(x) {\n    return new Task((resolve, reject) => resolve(x));\n  }\n\n  run() {\n    return new Promise(this.task)\n  }\n\n  map(fn) {\n    return new Task((resolve, reject) => new Promise(this.task)\n      .then(fp_flow(fn, resolve), reject)\n    );\n  }\n\n  chain(fn) {\n    return new Task((resolve, reject) => this.run()\n      .then((x) => fn(x).run().then(resolve, reject))     \n    )\n  }\n\n  // map(fn) {\n  //   return new Task((reject, resolve) =>(reject, compose(resolve, fn)));\n  // }\n\n  // ap(f) {\n  //   return this.chain(fn => f.map(fn));\n  // }\n\n  // chain(fn) {\n  //   return new Task((reject, resolve) => this.fork(reject, x => fn(x).fork(reject, resolve)));\n  // }\n\n  // join() {\n  //   return this.chain(id);\n  // }\n}\n;// CONCATENATED MODULE: external \"node-fetch\"\nconst external_node_fetch_namespaceObject = require(\"node-fetch\");;\nvar external_node_fetch_default = /*#__PURE__*/__webpack_require__.n(external_node_fetch_namespaceObject);\n;// CONCATENATED MODULE: ./src/utils/fetching.js\n\n\n\nconst getURL = (url) => new Task((resolve, reject) => \n  external_node_fetch_default()(url, {method: 'GET', headers: { \"Content-Type\": 'text/plain'}})\n    .then(resolve)\n    .catch(reject)\n)\n\nconst extractHTML = (response) => new Task((resolve, reject) =>\n  response.text()\n    .then(resolve)\n    .catch(reject)\n)\n\n\n;// CONCATENATED MODULE: ./src/utils/string.js\n\n\n\nconst head = (/* unused pure expression or super */ null && (first));\n\nconst stringifty = (value) => JSON.stringify(value);\n\nconst split = (splitter) => (str) => str.split(splitter);\n\nconst match = (regex) => (str) => Maybe_Maybe.of(str.match(regex));\n\nconst contains = (regex) => (str) => match(regex)(str).map(() => str);\n;// CONCATENATED MODULE: ./src/utils/index.js\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/index.js\n\n\nconst getDocument = fp_flow(\n  prop('window'),\n  chain(prop('document')),\n)\n\nconst isAnchorToSubpage = (root) => fp_flow(\n  getAttribute('href'),\n  chain(contains(/^(https?)/)),\n  chain(contains(root)),\n  debug(id),\n  value,\n  toBool\n)\n\n\n\ngetURL('https://www.empik.com')\n  .chain(extractHTML)\n  .map(fp_flow(\n    domFromHTML,\n    getDocument,\n    map(fp_flow(\n      querySelectorAll('a'),\n      toArray,\n      filter(isAnchorToSubpage('https://www.empik.com')),\n      map(fp_flow(\n        prop('href'),\n        debug(id)\n      ))\n    ))\n  ))\n  .run()//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///358\n")})();